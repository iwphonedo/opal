worker_processes 1;

events { worker_connections 1024; }

http {
    error_log  /var/log/nginx/error.log  debug;  # Ensure this is set

    lua_shared_dict jwt_cache 10m;  # Cache to avoid re-parsing JWT on every request
    lua_package_path "/usr/local/lib/lua/?.lua;;";  # Adjust to match the Lua path on your setup

    server {
        listen 80;

        set $auth_status 0;

        location /a {
            access_log /var/log/nginx/proxy_access.log;

            # Directly proxy to Flask without authorization
            proxy_pass http://127.0.0.1:5000;   
        }

        # This will be enforced in the endpoint
        location /c {
            access_log /var/log/nginx/proxy_access.log;
            
            proxy_pass http://127.0.0.1:5000;
        }

        location / {
            access_log /var/log/nginx/proxy_access.log;

            # Log the Authorization header to see if it's being passed correctly
            log_by_lua_block {
                ngx.log(ngx.ERR, "Authorization header: ", ngx.var.http_authorization)
            }

            # Send authorization subrequest
            auth_request /authz_check;

            # Proxy to Flask app if authorized
            proxy_pass http://127.0.0.1:5000;
        }

        location = /authz_check {
            internal;

            # Authorization headers and content type for OPAL client
            proxy_set_header Content-Type "application/json";
            proxy_set_header Authorization $http_authorization;
            proxy_pass_request_body off;

            access_by_lua_block {
                local jwt_token = ngx.var.http_authorization:match("Bearer%s+(.+)")
                ngx.log(ngx.ERR, "JWT Token: ", jwt_token)

                if jwt_token then
                    local decoded_jwt = require("cjson").decode(require("ngx.decode_base64")(jwt_token:match("^[^.]+%.([^.]+)")))
                    ngx.log(ngx.ERR, "Decoded JWT: ", require("cjson").encode(decoded_jwt))

                    local user_id = decoded_jwt["sub"]
                    local method = ngx.req.get_method()
                    local path = ngx.var.request_uri

                    local opa_input = {
                        input = {
                            user = user_id,
                            method = method,
                            path = path
                        }
                    }

                    ngx.req.set_body_data(require("cjson").encode(opa_input))
                else
                    ngx.log(ngx.ERR, "No JWT token found in Authorization header")
                end
            }

            # Forward request to OPAL
            proxy_pass http://opal_client:8181/v1/data/authorize;

            # Process OPAL's response in header_filter_by_lua_block if needed
            header_filter_by_lua_block {
                ngx.ctx.auth_allowed = false  -- Default to unauthorized

                local res_body = ngx.arg[1]
                if res_body then
                    local response_json = require("cjson").decode(res_body)
                    if response_json and response_json["result"] == true then
                        ngx.ctx.auth_allowed = true
                    end
                end

                if not ngx.ctx.auth_allowed then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("Unauthorized")
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
            }
        }
        # Custom 401 page if unauthorized
        error_page 401 = /unauthorized;
        error_page 403 = /unauthorized;
        location = /unauthorized {
            internal;
            return 401 "Unauthorized";
        }
    }
}