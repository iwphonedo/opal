version: '3.8'

services:
  # Database service for broadcast channel
  broadcast_channel:
    image: postgres:alpine
    container_name: broadcast_channel
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  # Gitea service
  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - DB_TYPE=sqlite3  # Alternatively, you can set up PostgreSQL or MySQL for production
      - GITEA__database__DB_PATH=/data/gitea/gitea.db
      - GITEA__server__ROOT_URL=http://localhost:3000/
      - GITEA__service__DISABLE_REGISTRATION=true  # Optional: disable public registrations for security
    volumes:
      - gitea_data:/data
    ports:
      - "3000:3000"  # Expose Gitea's web interface on port 3000
      - "2222:22"    # Expose Gitea's SSH service on port 2222
    depends_on:
      - broadcast_channel

  # OPAL Server and Client service
  opal_server:
    build:
      context: ../  # Point to the directory containing your Dockerfile
      dockerfile: ./docker/Dockerfile.server  # Specify your Dockerfile if it's not named 'Dockerfile'
    container_name: opal_server
    environment:
      - OPAL_BROADCAST_URI=postgres://postgres:postgres@broadcast_channel:5432/postgres
      - UVICORN_NUM_WORKERS=1
      - OPAL_POLICY_REPO_URL=http://gitea:3000/permit/opal-example-policy-repo
      - OPAL_POLICY_REPO_POLLING_INTERVAL=30
      - OPAL_DATA_CONFIG_SOURCES={"config":{"entries":[{"url":"http://opal_server:7002/policy-data","topics":["policy_data"],"dst_path":"/static"}]}}
      - OPAL_LOG_FORMAT_INCLUDE_PID=true
      - OPAL_SERVER_URL=http://opal_server:7002
      - OPAL_LOG_FORMAT_INCLUDE_PID=true
      - OPAL_INLINE_OPA_LOG_FORMAT=http
      - DEBUGPY_PORT=5678
    ports:
      - "7002:7002"  # Expose OPAL Server
      - "5679:5678"  # DebugPy
    volumes:
      - ../packages:/app/packages  # Mount local packages directory for live updates
      - ../scripts:/app/scripts      # Mount local scripts for live updates
      - ../README.md:/app/README.md   # Mount README for reference, if necessary
    depends_on:
      - gitea
    command: sh -c "exec ./wait-for.sh broadcast_channel:5432 --timeout=20 -- ./start.sh"

  opal_client:
    build:
      context: ../  # Point to the directory containing your Dockerfile
      dockerfile: ./docker/Dockerfile.client  # Specify your Dockerfile if it's not named 'Dockerfile'
    container_name: opal_client
    environment:
      - OPAL_SERVER_URL=http://opal_server:7002
      - OPAL_LOG_FORMAT_INCLUDE_PID=true
      - OPAL_INLINE_OPA_LOG_FORMAT=http
      - DEBUGPY_PORT=5678
    ports:
      - "7766:7000"  # OPAL client
      - "8181:8181"  # OPA agent
      - "5680:5678"  # DebugPy
    depends_on:
      - opal_server
    command: sh -c "exec  ./wait-for.sh opal_server:7002 --timeout=20 -- ./start.sh"

  sample_service:
    build:
      context: ../app-tests/sample_service  # Point to the directory containing your Dockerfile
      dockerfile: ./Dockerfile  # Specify your Dockerfile if it's not named 'Dockerfile'
    container_name: openresty_nginx  # This sets the container name
    environment:
      - FLASK_APP=app.py
      - OPAL_URL=http://opal_client:7000
    ports:
      - "5500:80"
      - "5682:5682"
    volumes:
      - ../app-tests/sample_service/sources:/app/sources  # Mount the sources directory
    depends_on:
      - opal_client
  frontend:
    build:
      context: ../app-tests/opal-frontend
      dockerfile: ./Dockerfile
    container_name: frontend
    ports:
      - "4200:80"  # Serve Angular app on http://localhost:4200
    depends_on:
      - sample_service  # Make sure the backend is up first

volumes:
  opa_backup:
  gitea_data:  # Data volume for Gitea